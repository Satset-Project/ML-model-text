# -*- coding: utf-8 -*-
"""Progress Simple ChatBox.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pV92upxMqV_sOSJ9yVoTsmRpyQSG56gD
"""

import re

# Step 1: Define problem categories, keywords, and actions
categories = {
    "electricity": {
        "keywords": ["light", "bulb", "switch", "electrical", "wire"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "air_conditioner": {
        "keywords": ["air conditioner", "ac", "cooling", "hvac"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "plumbing": {
        "keywords": ["faucet", "leak", "pipe", "drip", "plumbing"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "computer": {
        "keywords": ["computer", "pc", "laptop", "software", "hardware"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "washer": {
        "keywords": ["washer", "washing machine", "laundry", "spin", "drain"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "refrigerator": {
        "keywords": ["refrigerator", "fridge", "cooling", "ice", "defrost"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
}

# Step 2: Define solutions
solutions = {
    "plumbing": "Plumbing {action}",
    "electricity": "Electrical {action}",
    "air_conditioner": "Air Conditioner {action}",
    "computer": "Computer {action}",
    "washer": "Washer {action}",
    "refrigerator": "Refrigerator {action}",
}

# Step 3: Define the template for responses
response_template = "It seems like you're experiencing a {problem}, which can lead to {issue}. Our recommended solution for this issue is {solution} to {action}."

# Step 4: Text Preprocessing Function
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    return text

# Step 5: Generate Response Function
def generate_response(description):
    preprocessed_description = preprocess_text(description)
    words = preprocessed_description.split()

    for category, details in categories.items():
        for keyword in details["keywords"]:
            if keyword in words:
                problem = keyword
                issue = "continuous dripping and water wastage"  # Modify this as needed based on keywords
                action = "Repair"  # Default action; this can be more sophisticated with additional logic
                solution = solutions[category].format(action=action)
                response = response_template.format(
                    problem=problem,
                    issue=issue,
                    solution=solution,
                    action=action
                )
                return response

    return "Sorry, I couldn't identify the problem. Please provide more details."

# Example usage
description = "Broken faucet, causing continuous dripping and wasting water. Needs fixing to stop the leak and restore proper functionality."
response = generate_response(description)
print(response)

import re

# Define problem categories, keywords, and actions
categories = {
    "electricity": {
        "keywords": ["light", "bulb", "switch", "electrical", "wire"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "air_conditioner": {
        "keywords": ["air conditioner", "ac", "cooling", "hvac"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "plumbing": {
        "keywords": ["faucet", "leak", "pipe", "drip", "plumbing"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "computer": {
        "keywords": ["computer", "pc", "laptop", "software", "hardware"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "washer": {
        "keywords": ["washer", "washing machine", "laundry", "spin", "drain"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "refrigerator": {
        "keywords": ["refrigerator", "fridge", "cooling", "ice", "defrost"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
}

# Define solutions
solutions = {
    "plumbing": "Plumbing {action}",
    "electricity": "Electrical {action}",
    "air_conditioner": "Air Conditioner {action}",
    "computer": "Computer {action}",
    "washer": "Washer {action}",
    "refrigerator": "Refrigerator {action}",
}

# Define the template for responses
response_template = "It seems like you're experiencing a {problem}, which can lead to {issue}. Our recommended solution for this issue is {solution} to {action}."

# Text Preprocessing Function
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    return text

# Generate Response Function
def generate_response(description):
    preprocessed_description = preprocess_text(description)
    words = preprocessed_description.split()

    for category, details in categories.items():
        for keyword in details["keywords"]:
            if keyword in words:
                problem = keyword
                issue = "an issue related to your " + category  # Modify this as needed based on keywords
                action = "Repair"  # Default action; this can be more sophisticated with additional logic
                solution = solutions[category].format(action=action)
                response = response_template.format(
                    problem=problem,
                    issue=issue,
                    solution=solution,
                    action=action
                )
                return response

    return "Sorry, I couldn't identify the problem. Please provide more details."

# Main function to input and process description
def main():
    description = input("Please describe your issue: ")
    response = generate_response(description)
    print(response)

# Example usage
if __name__ == "__main__":
    main()

import re

# Define problem categories, keywords, and actions
categories = {
    "electricity": {
        "keywords": ["light", "bulb", "switch", "electrical", "wire", "fan"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "air_conditioner": {
        "keywords": ["air conditioner", "ac", "cooling", "hvac"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "plumbing": {
        "keywords": ["faucet", "leak", "pipe", "drip", "plumbing", "sink", "clog"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "computer": {
        "keywords": ["computer", "pc", "laptop", "software", "hardware", "screen", "startup"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "washer": {
        "keywords": ["washer", "washing machine", "laundry", "spin", "drain", "dishwasher"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
    "refrigerator": {
        "keywords": ["refrigerator", "fridge", "cooling", "ice", "defrost", "freezer"],
        "actions": ["Installation", "Repair", "Maintenance"]
    },
}

# Define solutions
solutions = {
    "plumbing": "Plumbing {action}",
    "electricity": "Electrical {action}",
    "air_conditioner": "Air Conditioner {action}",
    "computer": "Computer {action}",
    "washer": "Washer {action}",
    "refrigerator": "Refrigerator {action}",
}

# Define the template for responses
response_template = "It seems like you're experiencing a {problem}, which can lead to {issue}. Our recommended solution for this issue is {solution} to {action}."

# Text Preprocessing Function
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)
    return text

# Generate Response Function
def generate_response(description):
    preprocessed_description = preprocess_text(description)
    words = preprocessed_description.split()

    for category, details in categories.items():
        for keyword in details["keywords"]:
            if keyword in words:
                problem = keyword
                issue = "an issue related to your " + category  # Modify this as needed based on keywords
                action = "Repair"  # Default action; this can be more sophisticated with additional logic
                solution = solutions[category].format(action=action)
                response = response_template.format(
                    problem=problem,
                    issue=issue,
                    solution=solution,
                    action=action
                )
                return response

    return "Sorry, I couldn't identify the problem. Please provide more details."

# Main function to input and process description
def main():
    description = input("Please describe your issue: ")
    response = generate_response(description)
    print(response)

# Example usage
if __name__ == "__main__":
    main()

"""Data Preparation"""

import pandas as pd

# Sample data
data = {
    "description": [
        "Broken faucet, causing continuous dripping and wasting water. Needs fixing to stop the leak and restore proper functionality.",
        "The air conditioner is making strange noises and not cooling the room properly. Needs to be checked and repaired.",
        "The washing machine is not draining water after the cycle. Needs immediate repair to prevent water damage.",
        "The computer won't start up and displays a blue screen error. Requires diagnosis and fixing.",
        "The refrigerator is not keeping food cold and the freezer is defrosting. Needs urgent repair to restore proper cooling.",
        "A light switch is not working and the lights won't turn on. Needs to be inspected and fixed.",
        "The bathroom sink is clogged and water is not draining properly. Needs to be unclogged and restored to normal function.",
        "The laptop's screen is flickering and showing distorted colors. Needs to be repaired or replaced.",
        "The ceiling fan is wobbling and making a rattling sound. Needs to be checked for loose parts and fixed.",
        "The dishwasher is leaking water onto the kitchen floor. Needs to be inspected and repaired to prevent further leaks.",
        "The air conditioner is blowing warm air instead of cool. Needs to be serviced and refilled with coolant."
    ],
    "category": [
        "plumbing",
        "air_conditioner",
        "washer",
        "computer",
        "refrigerator",
        "electricity",
        "plumbing",
        "computer",
        "electricity",
        "washer",
        "air_conditioner"
    ],
    "action": [
        "Repair",
        "Repair",
        "Repair",
        "Repair",
        "Repair",
        "Repair",
        "Maintenance",
        "Repair",
        "Maintenance",
        "Repair",
        "Maintenance"
    ]
}

df = pd.DataFrame(data)

"""Preprocess the Data"""

import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Prepare the tokenizer
tokenizer = Tokenizer()
tokenizer.fit_on_texts(df['description'])

# Convert text to sequences
sequences = tokenizer.texts_to_sequences(df['description'])
max_sequence_length = max(len(seq) for seq in sequences)
padded_sequences = pad_sequences(sequences, maxlen=max_sequence_length, padding='post')

# Prepare the labels
category_labels = pd.get_dummies(df['category']).values
action_labels = pd.get_dummies(df['action']).values

"""Build the Model"""

from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Embedding, LSTM, Dense, Concatenate

# Define the input
input_ = Input(shape=(max_sequence_length,))

# Embedding layer
embedding = Embedding(input_dim=len(tokenizer.word_index) + 1, output_dim=128, input_length=max_sequence_length)(input_)

# LSTM layer
lstm = LSTM(128)(embedding)

# Dense layers for category and action predictions
category_output = Dense(len(df['category'].unique()), activation='softmax', name='category_output')(lstm)
action_output = Dense(len(df['action'].unique()), activation='softmax', name='action_output')(lstm)

# Combine the model
model = Model(inputs=input_, outputs=[category_output, action_output])

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

"""Train the Model"""

# Split the data into training and validation sets
from sklearn.model_selection import train_test_split

X_train, X_val, y_train_category, y_val_category, y_train_action, y_val_action = train_test_split(
    padded_sequences, category_labels, action_labels, test_size=0.2, random_state=42
)

# Train the model
history = model.fit(
    X_train,
    {'category_output': y_train_category, 'action_output': y_train_action},
    validation_data=(X_val, {'category_output': y_val_category, 'action_output': y_val_action}),
    epochs=10,
    batch_size=32
)

"""Generate Responses"""

# Define the function to generate responses
def generate_response(description):
    # Preprocess the input description
    sequence = tokenizer.texts_to_sequences([description])
    padded_sequence = pad_sequences(sequence, maxlen=max_sequence_length, padding='post')

    # Predict category and action
    category_pred, action_pred = model.predict(padded_sequence)

    # Get the predicted category and action
    category = df['category'].unique()[category_pred.argmax()]
    action = df['action'].unique()[action_pred.argmax()]

    problem = "an issue with your " + category.replace('_', ' ')
    issue = "an issue related to your " + category.replace('_', ' ')
    solution = solutions[category].format(action=action)

    response = response_template.format(
        problem=problem,
        issue=issue,
        solution=solution,
        action=action
    )
    return response

# Test the function
description = input("Please describe your issue: ")
response = generate_response(description)
print(response)